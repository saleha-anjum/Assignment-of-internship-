Steps I Took to Create My GitHub Account

1. Visited GitHub Website: Opened [https://github.com](https://github.com) in my web browser.
2. Clicked Sign Up: Clicked the “Sign up” button on the top right corner.
3. Entered Details: Filled in my chosen username, email address, and a strong password.
4. Verification: Solved the puzzle to verify I am not a robot and clicked “Create account”.
5. Selected Plan: Chose the free plan.
6. Email Verification: Received an email from GitHub and clicked the verification link.
7. Profile Setup: Added my profile picture and bio.
8. Completed Setup: Started exploring GitHub and creating repositories.


To create a new public GitHub repository named "my first repo", follow these steps:

1. Log in to GitHub: Go to [github.com](https://github.com) and log in to your account.

2. Create a New Repository:
    - Click on the `+` icon in the top right corner of the page and select `New repository`.
    - Enter `my first repo` in the `Repository name` field.
    - Ensure `Public` is selected.
    - Optionally, you can add a description and initialize the repository with a README.
    - Click `Create repository`.

Once you follow these steps, your new public repository named "my first repo" will be created.

Repository link

https://github.com/your-username/my-first-repo

Replace `your-username` with your GitHub username. This will be the link to your newly created repository.

Repository Cloning

1. Clone the Repository to Your Local Machine:
   - Open your terminal or command prompt.
   - Run the following command:

```sh
git clone https://github.com/your-username/my-first-repo.git
```

2. Screenshot:
   Ensure your terminal shows the clone command and successful cloning message.


Collaborative Workflow

1. Invite a Collaborator:

   - Go to your repository page.
   - Click on the "Settings" tab.
   - In the left sidebar, click on "Manage access."
   - Click on the "Invite a collaborator" button.
   - Enter the GitHub username or email of your classmate or friend and click "Add."

2. Forking the Repository (Classmate's Actions):

   - Your classmate should go to your repository page.
   - Click on the "Fork" button in the upper-right corner.
   - This will create a copy of your repository in their GitHub account.

3. Making a Change (Classmate's Actions):

   - Your classmate should clone their forked repository to their local machine.
   - Make a change to the repository, such as editing the README file.
   - Commit the change and push it to their forked repository.

4. Creating a Pull Request (Classmate's Actions):

   - Go to the original repository (your repository) page.
   - Click on the "Pull requests" tab.
   - Click on the "New pull request" button.
   - Compare the changes and create a pull request by providing a title and description.
   - Click "Create pull request."

5. Accepting the Pull Request (Your Actions):
   - Go to the "Pull requests" tab in your repository.
   - Click on the new pull request created by your classmate.
   - Review the changes.
   - If everything looks good, click the "Merge pull request" button.
   - Click "Confirm merge."

Explanation of the Collaborative ProcessThe collaborative process using GitHub involves several key steps that ensure a smooth workflow and maintain the integrity of the codebase:

1:- Forking and Cloning-: Forking allows your classmate/friend to have their own copy of the repository where they can make changes without affecting the original code. Cloning the forked repository enables them to work on their local machine.

2-:Branching:- Creating a new branch for changes ensures that the main branch (usually main or master) remains stable. It also makes it easier to manage different features or bug fixes independently.

3:- Making Changes-: After making changes in the new branch, your classmate/friend commits those changes with a descriptive message, making it clear what modifications were made and why.

4:-Pull Requests:- Pull requests are a way to notify you about changes that are ready to be reviewed. They provide a space for discussion, review, and testing of the proposed changes before they are merged into the main codebase.

5:-Reviewing and Merging:- Reviewing pull requests allows you to ensure the changes are correct, follow the project's guidelines, and do not introduce new issues. Once satisfied, merging the pull request integrates the changes into the main branch.
